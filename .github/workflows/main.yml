name: DevSecOps Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Install dependencies
        run: npm install

      - name: Run linter
        run: npx ng lint

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Build project
        run: npx ng build

      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  docker:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        run: |
          docker build -t hello-world-backend:latest .
          docker save hello-world-backend:latest -o image.tar

      - name: Upload image.tar
        uses: actions/upload-artifact@v4
        with:
          name: image.tar
          path: .

  test:
    name: Unit Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Download dist
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Restore node_modules cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node_modules-

      - name: Install Chrome dependencies
        run: |
          curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor | sudo tee /usr/share/keyrings/google-linux.gpg > /dev/null 
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-linux.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          sudo apt-get update 
          sudo apt-get install -y chromium

      - name: Set Puppeteer Executable Path
        run: echo "PUPPETEER_EXECUTABLE_PATH=$(which chromium-browser)" >> $GITHUB_ENV
      - name: Run unit tests with coverage
        run: npx ng test --code-coverage --no-progress --browsers=ChromeHeadlessNoSandbox --no-watch
        env:
          CI: true

      - name: Upload unit test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/

  trivy-fs:
    name: Trivy Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner in fs mode
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy plugin install github.com/umax/trivy-plugin-sonarqube
          trivy fs --format=json --output=trivy.json --exit-code=1 --ignore-unfixed=true .
          trivy sonarqube trivy.json > trivy-fs.json

      - name: Upload trivy-fs.json
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs.json
          path: trivy-fs.json

  trivy-image:
    name: Trivy Image Scan
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - uses: actions/checkout@v3

      - name: Download image.tar
        uses: actions/download-artifact@v4
        with:
          name: image.tar
          path: .

      - name: Load docker image
        run: docker load -i image.tar

      - name: Run Trivy vulnerability scanner in image mode
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy plugin install github.com/umax/trivy-plugin-sonarqube
          trivy image --format=json --output=trivy.json --exit-code=1 --ignore-unfixed=true hello-world-backend:latest
          trivy sonarqube trivy.json > trivy-image.json

      - name: Upload trivy-image.json
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image.json
          path: trivy-image.json

  sonar:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [test, trivy-fs, trivy-image]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download unit test coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage
          path: coverage/

      - name: Download trivy-fs.json
        uses: actions/download-artifact@v4
        with:
          name: trivy-fs.json
          path: trivy/

      - name: Download trivy-image.json
        uses: actions/download-artifact@v4
        with:
          name: trivy-image.json
          path: trivy/

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        with:
          args: >
            -Dsonar.externalIssuesReportPaths=trivy/trivy-fs.json,trivy/trivy-image.json
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Wait for Sonar Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: sonar
    if: github.ref == 'refs/heads/main'
    outputs:
      release_tag: ${{ steps.semantic.outputs.new_release_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Download semantic-release configs
        run: curl -fsSL -o .releaserc.js https://raw.githubusercontent.com/RyuunosukeDS3/git-standards/main/.releaserc.js

      - name: Install semantic-release and plugins
        run: |
          npm init -y
          npm install --no-save semantic-release \
            @semantic-release/commit-analyzer \
            @semantic-release/release-notes-generator \
            @semantic-release/github \
            @semantic-release/git \
            conventional-changelog-conventionalcommits

      - name: Run semantic-release
        id: semantic
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          npx semantic-release
